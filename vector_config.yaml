sources:
  in:
    type: http_server
    address: ${HOST}:${PORT}
    headers:
      - "*"

transforms:
  parse_json:
    type: remap
    inputs:
      - in
    source: |
      message_json = parse_json!(del(.message))
      request_metadata = .
      . = { "message": message_json, "request_metadata": request_metadata }

  router:
    type: route
    inputs:
      - parse_json
    route:
      convs: '.message.type == "convs"'
      votes: '.message.type == "votes"'

  set_route_convs:
    type: remap
    inputs:
      - router.convs
    source: |
      .route = "convs"

  set_route_votes:
    type: remap
    inputs:
      - router.votes
    source: |
      .route = "votes"

  sample:
    type: sample
    inputs:
      - set_route_convs
      - set_route_votes
    rate: 1 # 1 out 1 events will be passed through

sinks:
  console_out:
    type: console
    encoding:
      codec: json
    inputs:
      - sample

  out:
    type: gcp_cloud_storage
    inputs:
      - set_route_convs
      - set_route_votes
    bucket: ${GCS_BUCKET_NAME:?the bucket name must be supplied via GCS_BUCKET_NAME env var}
    encoding:
      codec: json
    framing:
      method: newline_delimited
    key_prefix: "{{route}}/year=%Y/month=%m/day=%d/"
    batch:
      max_events: ${GCS_BATCH_MAX_EVENTS:-1000}
      timeout_secs: ${GCS_BATCH_TIMEOUT_SECS:-300}